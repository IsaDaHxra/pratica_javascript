SOBRE O JAVASCRIPT:

- Ela é uma linguagem de programação de alto nível.
- Sua principal função é deixar a página viva, adicionando comportamentos (alteração de HTML e CSS) através de eventos (Isso no front-end).
- JavaScript é case sensitive, ou seja, quando cria uma variável com o mesmo nome porém com alguma letra ou a palavra inteira maiúscula ou 
  minúscula, não são caracterizadas como a mesma variável.

ONDE O JAVASCRIPT É UTILIZADO?

- Interação com a página, HTML e CSS, através do DOM (O dom é basicamente uma cópia do HTML no objeto dp js)
- Cálculo, manipulação, e validação de dados;
- É empregado também no server-side, com Node.js (back-end)
- As principais bibliotecas de Front-end são baseadas em js (react,vue, angular, Svelte...)

FORMAS DE EXECUTAR JS:

- Padrão: arquivo importado no HTML
- Diretamente no navegador, através do Console
- Por meio de aplicações, como o JS Fiddle

COMANDOS:

- console.log: É como se fosse o print do js
- Sempre coloque ; no final de uma linha (igual java)
- Para integrar um arquivo js externo ao html, é só linkar no html com o <script src="nome-arquivo.js">.

O QUE SÃO TIPOS DE DADOS?

- Forma de classificar um dado
- Temos como dado: "Isabelly", 15, true, [] (a lista é um array, ou seja, um object.)
- Os tipos de dados mais comuns são Number, String, Boolean, Empty values (null, undefined), Object.
- Todos os números são number, não há uma diferença na classifação deles.
* Toda comparação resulta em um boolean.
- No JavaScript, o operador typeof exibe o tipo de dado.

NUMBERS

- Podemos realizar equações no js
- Os operadores que podemos usar também são: +, -, *, /
- Temos os Special Numbers, eles são dados considerados como números, mas não funcionam como eles.
  -> Infinity, -Infinity, NaN (Not a number)
  -> Algumas operações podem resultar nesses valores

STRINGS

- No JS temos três formas de criar dados de texto, sendo eles as aspas simples, duplas e crases.
- O "efeito final" é o mesmo, porém cada um deles tem suas particularidades.
- A concatenação é feita pelo operador +
- A interpolação no JS é ${ Algum código } (a interpolação é tipo o %d do java, {variável} em python..)
  -> Ela deve ser escrita `entre crases`.

COMPARAÇÕES

- As comparações que podemos utilizar são
  -> Maior e menor: > e <
  -> Igual: ==
  -> Diferente: !=
  -> Idêntico: === (também temos o !==)
  * Eles funcionam como == e !=, mas eles levam em consideração o tipo do dado. Por exemplo: 9 == "9" dá true, pois o valor é o mesmo. 9 === "9"
    resulta em false, pois um é String e outro é Number, portanto, não são iguais.
  * Devemos ao máximo tentar utilizá-los

OPERADORES LÓGICOS

- && Corresponde a AND.
- || Corresponde a OR.
- ! Corresponde a NOT.

            - TABELA VERDADE -

  |  A  |  B  | A and B | A or B |  Not A |
  |False|False|  False  | False  | False  |
  |False|True |  False  | True   |  True  |
  |True |False|  False  | True   | False  |
  |True |True |  True   | True   | False  |

EMPTY VALUES

- Temos duas palavras que pertencem a este grupo de dados: undefined e null
- undefined geralmente é vista quando usamos um código que não foi definido ainda (variáveis por exemplo)
- O null geralmente é colocado pelo programador para determinar o que ainda não tem um valor

CONVERSÃO DE TIPO AUTOMÁTICA

- No js algumas operações mudam de tipo de dado, e isso acontece "silenciosamente"
  * Exemplos *
   5 * null = 0            
   "5" - 3  = 2
   "5" + 1  = 51
   "a" * "b" = NaN

SALVANDO VALORES NA MEMÓRIA

- Precisamos utilizar variáveis ao invés de atribuir valores nas expressões
- Elas são como containers, que salvam informações para quando precisamos utilizar
- Para declarar variáveis, utilizamos o let e const
- O let é utilizado para atribuir o valor da variável que pode mudar posteriormente, por exemplo: let nome = "Isabelly"
- Para mudarmos o valor da variável, não precisamos colocar o let novamente, basta utilizar o nome da variável e o novo valor
  *Ex: nome = "Isabelly da Hora"
- Com o const, é um valor fixo, então não podemos alterar o valor da variável como o let.
- Na maioria das vezes utilizamos o const.
- Podemos criar várias variáveis em sequência, desta forma: let a=5, b = 4, c= 10
  * Porém não é muito recomendado
- Não podemos começar variáveis com números e não podemos utilizar caracteres especiais
- As variáveis são case sensitive
- Os símbolos permitidos para criarmos variáveis são o _ e o $

AMBIENTE JS

- Quando um programa é inciado, um ambiente é crido. O ambiente é navegador
- Nele temos diversas funções e objetos, por exemplo: console e alert;
  * Todo o programa terá acesso a elas.

ESTRURA DE UMA FUNÇÃO

- Uma função é um bloco de códigos que pode ser reaproveitado ao longo do programa
- Chamamos ela pelo seu nome e também o uso de parênteses: funcao()
- O log é um exemplo de função de console

PROMPT

- A função prompt recebe um dado do usuário
- ele funciona como input do js, porém é pouco utilizada por conta da janela que ela abre.
- Utilizamos e da seguinte maneira: const x = prompt("Digite alguma coisa:")

ALERT

- O alert emite uma mensagem na tela por um pop up
- Não é muito utilizada, mas é um clássico do JS
- Evitamos ao máximo para não atrapalhar a navegação do site

MATH

- Math é um objeto que possui diversas funções para fins matemáticos
- Exemplos:
  * Max: encontra maior número
    floor: arredonda o número para baixo
    ceil: arredonda pra cima

CONSOLE

- O console também é um objeto, assim como o math.
- Ele possui várias funções, sendo a de exibir uma mensagem de alguma categoria no console a função principal.
- Temos alguns métodos muito interessantes para aplicar, por agora, tenho alguns exemplos:
  * error: Exibe uma mensagem de erro personalizada
    warn: Exibe uma mensagem de alerta personalidada

ESTRUTURAS DE CONTROLE

- Os programas são executados de cima para baixo
- Com as estruturas podemos alterar o fluXo de execução
- Temos as condições e comparações, as principais são if e else

ESTRUTURAS DE REPETIÇÕES

- É um bloco de código que se repete até uma condição ser satisfeita
- Alguns da estruturas são: for e while
- Elas possuem sintaxes diferentes, porém chegam no mesmo resultado
- Precisamos ter cautela para não chegarmos ao loop infinito
- A palavra reservada continue pode pular uma ou mais execuções do loop
  * Ele é um recurso utilizado de forma semelhante ao break
- O switch pode se utilizado para organizar o excesso de if/else
  * Cada if seria um case, e para cada case, temos que adicionar um break
    Também temos o default , que é como o else
    É uma estrutura mais limpa e organizada

FUNÇÕES

- Elas são estruturas de código menores, podemos dividir o código em várias funções
- O ideal é que cada uma tenho apenas um objetivo só
- Ela nos faz poupar código
- Para criarmos uma função, utilizamos a palavra function, depois precisamos nomeá-la
- Os parâmetros ficam entre () depois do nome
- O corpo da função fica entre {} (assim como no java)
- Geralmente ela retorna um valor
- Podemos criar uma função em uma variável também
  * Não tem diferença nas duas formas de criar, apenas se utilizar o const para declarar a variável, pois garante que não haverá sobrescrita nela
- Arrow function é uma outra forma de criar uma função
  * Ela tem uma sintaxe resumida, que tem algumas diferenças das funções normais.
    Ela é mais utilizada em funções pequenas

CLOSURE

- Closure é um conjunto de funçõesm onde temos reaproveitamento do escopo interno de uma função
- Elas também podem servir para salvar os resultados já executados.
- Assim temos uma variável que executa uma função e modifica seu valor

RECURSÃO

- Ela permite a função de autoinvocar continuamente
- Criamos uma espécie de loop
- É interessante definir uma condição final para parar a execução

ARRAY

- Array são listas
- Os conteúdos dentro das listas são separados por vírgulas
- Podemos adicionar propriedades nelas (como o lenght) das seguintes maneiras:
  * dado.lenght
    dado["lenght"]
- Podemos percorres o array com as estruturas de repetição

MÉTODOS

- Os métodos são como funções, utilizamos os parênteses para invocar
- Objetos são compostos por métodos e propriedades
- Podemos verificar as propriedades de um objeto com o método keys de Object
- Podemos receber arrays dos nomes das propriedade com seus valores utilizando o método entries
- Podemos utilizar os métodos para  manipular os arrays, ou seja, alterar os valores de alguma forma
  * O push é responsável por adicionar um elemento no fim do array
    O pop é responsável pela remoção de um elemento no fim do array
    O shift é responsável pela remoção do primeiro elemento de um array
    O unshift é responsável por adicionar um elemento na primeira posição de um array
- O método com o método indexOf encontramos o índice de um elemento e retornamos um argumento para o método
- Com o método lastIndexOf podemos ver o índice da última ocorrência quando há uma repetição de elementos.
- Utilizamos o método slice para extrair um array menor de um array maior
  * O intervalo dos elementos é determinado pelos parâmetros que são o índice de início e índice do fim
    O último elemento é ignorado, para mostrá-lo, devemos somar 1 ao índice
- O método includes verifica se o array tem um elemento
  * Utilizamos no array e colocamos os elementos que buscamos
    Ele retorna um valor booleano
- O método reverse faz com que os elementos de um array sejam invertidos. Ele modifica o array original

MÉTODOS DE STRING

- As strings também são objetos, então possuem métodos e propriedades
- Alguns são semelhantes aos de array
  * Podemos usar o lenght em ambos dos objetos, acessar cada caractere pelo seu índice e etc..
- O trim remove tudo que não é texto de uma string, então ele tira espaços, \n e etc
  * Ele não modifica o elemento inicial
- O padstart insere o texto a começo da string (tem o padend tbm que coloca no final).
  * O testo pode ser repetido de acordo com o parâmetro (índices)
- O split divide uma string em um array; cada elemento será determinado por um separador em comum
- O join faz o caminho inverso de um split, ele une um array em uma string
- O repeat faz a repetição de um texto baseado no argumento

OBJETOS

- O nome técnico do objeto é object literals, isso pq vem da orientação a objetos com recursos de instância, herança😡
- Já os literals possui apenas propriedades e métodos que nós mesmos criamos
- O objeto fica em um bloco de {}
- Podemos copiar todas as propriedades de um objeto para outro com o método assign
- O object literal é uma instância de um objeto chamado object (o object literal é tipo a classe filha em java, temos uma herança)
- Um objeto ou array criado com const pode ter seus elementos e propriedades modificadas

PROPRIEDADES

- Para adicionar uma nova propriedade no objeto, utilizamos a notação de ponto e atribuímos im valor
- Para excluir uma, utilizamos o operador delete no alvo

DIFERENÇAS ENTRE ARRAYS E OBJETOS

- Os arrays são utilizados como listas de itens (geralmente todos possuem o mesmo tipo de dados)
- Os objetos são utilizados para descrever um item, contém as informações do mesmo, e as propriedades possuem diferentes tipos de dados
- Podemos ter um array de objetos, é muito utilizado.

MUTAÇÃO

- A mutação é uma característica que ocorre quando criamos um objeto a partir de outro
- Esse novo objeto não é novo, e sim, uma referência do primeiro
- As mudanças dele podem afetar a cópia e vice-versa (pensei em gêmeos siamesesKKKK)

ADICIONAIS

- Nem sempre o uso do ; é necessário, mas é uma boa prática
- Os comentários em js são // também.
- A cor do "output" no console muda de acordo com o tipo de dado, por exemplo: String -> Preto | Number -> Azul
- O \n e o \t funciona no JS!!! UHUU (o \t é tipo um espaçamento do tab)
- Método é a função dentro de um objeto
- Não podemos utilizar palavras reservadas no nome de uma variável
- No javascript também temos o break
- Com o operador instanceOf podemos ver se o objeto é filho de uma classe. 
  * Formação: <Objeto> instanceOf <Classe>
    Isso retorna true ou false
- Rest Operator é caracterizado pelas reticências (...)
  * Podemos utilizá-lo para receber indefinidos argumentos em uma função, com ele não precisamos declarar exatamente o que vamos receber.